generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../../../../libs/types/src"
  exportRelationModifierClasses = true
  outputToNestJsResourceStructure = true
  flatResourceStructure           = true
  classValidatorIsOptional        = true
  classValidation                 = true
  generateFileTypes               = "all"
  reExport                        = true
  definiteAssignmentAssertion     = true
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  prettier                        = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
//               CORE GAME MODEL
// =============================================

model Game {
  id                 Int       @id @default(autoincrement())
  /// @DtoCreateOptional
  roomCode           String    @unique
  turn               Int       @default(1)
  day                Int       @default(1)
  executionBlock     Int       @default(1)
  phase              GamePhase @default(CRISIS)
  victoryConditionMP Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  teams      Team[]
  gameBoard  GameBoard?
  atoLines   ATOLine[]
  satellites SatelliteInstance[]
  hospitals  Hospital[]
  eventLog   GameEvent[]
}

model GameBoard {
  id     Int  @id @default(autoincrement())
  gameId Int  @unique
  game   Game @relation(fields: [gameId], references: [id])

  politicalAccess   PoliticalAccess[]
  threatTokens      ThreatToken[]
  activeEventCard   String?
  activeRiskCard    String?
  enrouteUSTRANSCOM EnrouteUSTRANSCOM[]
}

model PoliticalAccess {
  id         Int          @id @default(autoincrement())
  boardId    Int
  board      GameBoard    @relation(fields: [boardId], references: [id])
  country    Country
  access     AccessStatus
  overflight AccessStatus
}

model EnrouteUSTRANSCOM {
  id          Int       @id @default(autoincrement())
  gameBoardId Int
  gameBoard   GameBoard @relation(fields: [gameBoardId], references: [id])

  assetType   AssetType
  quantity    Int
  arrivalTurn Int
}

// =============================================
//             TEAMS AND PLAYERS
// =============================================

model Team {
  id     Int  @id @default(autoincrement())
  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  type                 TeamType
  name                 String
  missionPoints        Int      @default(0)
  demoralizationPoints Int      @default(0)
  resourcePoints       Int      @default(0)
  riskTokensAvailable  Int      @default(2)

  players           Player[]
  controlledFOS     ForwardOperatingSite[]
  aircraftInstances AircraftInstance[]
  assetInstances    AssetInstance[]
  commoditiesAtMOB  CommodityStock[]
  mfrs              MFR[]
}

model Player {
  id        Int    @id @default(autoincrement())
  sessionId String @unique
  name      String
  role      String
  teamId    Int
  team      Team   @relation(fields: [teamId], references: [id])
}

// =============================================
//           LOCATIONS & AIRFIELDS
// =============================================

model ForwardOperatingSite {
  id              Int    @id @default(autoincrement())
  fosIdNumber     Int
  teamId          Int
  team            Team   @relation(fields: [teamId], references: [id])
  turnEstablished Int

  answeredRFIs    AnsweredRFI[]
  isFullyAssessed Boolean       @default(false)

  runwayStatus             RunwayStatus @default(OPERATIONAL)
  parkingRampMOG           MOGLevel
  parkingRampCondition     Float        @default(100.0)
  consecutiveStrikes       Int          @default(0)
  hasMobileArrestingSystem Boolean      @default(false)
  hasRunwayLighting        Boolean      @default(false)
  hasExpandedRamp          Boolean      @default(false)
  isHardened               Boolean      @default(false)

  completedTasks         AirfieldTask[]
  stationedAircraft      AircraftInstance[] @relation("StationedAircraft")
  stationedAssets        AssetInstance[]    @relation("StationedAssets")
  commodities            CommodityStock[]
  isPlaJammingWithin2Hex Boolean            @default(false)

  @@unique([teamId, fosIdNumber])
}

model CommodityStock {
  id       Int           @id @default(autoincrement())
  type     CommodityType
  quantity Int

  forwardOperatingSiteId Int?
  forwardOperatingSite   ForwardOperatingSite? @relation(fields: [forwardOperatingSiteId], references: [id])

  teamId Int?
  team   Team?   @relation(fields: [teamId], references: [id])
}

model AnsweredRFI {
  id    Int                  @id @default(autoincrement())
  fosId Int
  fos   ForwardOperatingSite @relation(fields: [fosId], references: [id])

  rfiKey   String
  rfiValue String

  @@unique([fosId, rfiKey])
}

// =============================================
//            AIRCRAFT & ASSETS
// =============================================

model AircraftInstance {
  id         Int            @id @default(autoincrement())
  callSign   String         @unique
  type       AircraftType
  strength   Int
  rangeHexes Int
  status     AircraftStatus @default(FMC)

  locationType  LocationType
  locationFosId Int?
  locationFos   ForwardOperatingSite? @relation("StationedAircraft", fields: [locationFosId], references: [id])
  locationHex   String?

  teamId                Int
  team                  Team            @relation(fields: [teamId], references: [id])
  payloadAssets         AssetInstance[] @relation("AircraftPayload")
  payloadPersonnelCount Int             @default(0)
  currentATOId          Int?
}

model AssetInstance {
  id              Int          @id @default(autoincrement())
  type            AssetType
  palletPositions Int
  mraCategory     MRACategory?

  locationType          LocationType
  locationFosId         Int?
  locationFos           ForwardOperatingSite? @relation("StationedAssets", fields: [locationFosId], references: [id])
  inTransitOnAircraftId Int?
  inTransitOnAircraft   AircraftInstance?     @relation("AircraftPayload", fields: [inTransitOnAircraftId], references: [id])

  teamId Int
  team   Team   @relation(fields: [teamId], references: [id])
}

// =============================================
//            ACTIONS & RECORDS
// =============================================

model ATOLine {
  id                   Int                   @id @default(autoincrement())
  gameId               Int
  game                 Game                  @relation(fields: [gameId], references: [id])
  turn                 Int
  aircraftCallSign     String
  startLocation        String
  enRouteDestination   String?
  finalDestination     String
  alternateDestination String?
  intention            FlightIntention
  riskTokenUsed        Boolean               @default(false)
  configuration        AircraftConfiguration
  pprStatus            PPRStatus             @default(PENDING)
  executionResult      String?
}

model ThreatToken {
  id          Int        @id @default(autoincrement())
  boardId     Int
  board       GameBoard  @relation(fields: [boardId], references: [id])
  type        ThreatType
  strength    Int
  locationHex String
}

model MFR {
  id            Int       @id @default(autoincrement())
  teamId        Int
  team          Team      @relation(fields: [teamId], references: [id])
  request       String
  status        MFRStatus @default(PENDING)
  turnSubmitted Int
}

model GameEvent {
  id          Int      @id @default(autoincrement())
  gameId      Int
  game        Game     @relation(fields: [gameId], references: [id])
  timestamp   DateTime @default(now())
  turn        Int
  description String
}

// =============================================
//             CSPOC & MEDCOM MODELS
// =============================================

model SatelliteInstance {
  id          Int           @id @default(autoincrement())
  gameId      Int
  game        Game          @relation(fields: [gameId], references: [id])
  type        SatelliteType
  orbit       OrbitType
  position    String
  hasFuelChit Boolean       @default(true)
}

model Hospital {
  id             Int            @id @default(autoincrement())
  gameId         Int
  game           Game           @relation(fields: [gameId], references: [id])
  locationName   String
  completedTasks HospitalTask[]
  bedspace       Bedspace[]
  patients       Patient[]
}

model Patient {
  id           Int          @id @default(autoincrement())
  hospitalId   Int
  hospital     Hospital     @relation(fields: [hospitalId], references: [id])
  casualtyType CasualtyType
  turnArrived  Int
}

model Bedspace {
  id           Int          @id @default(autoincrement())
  hospitalId   Int
  hospital     Hospital     @relation(fields: [hospitalId], references: [id])
  casualtyType CasualtyType
  capacity     Int

  @@unique([hospitalId, casualtyType])
}

// =============================================
//                 ENUMERATIONS
// =============================================

enum GamePhase {
  CRISIS
  CONFLICT
}

enum TeamType {
  CAOC
  CSPOC
  MOB
  MEDCOM
  GM
}

enum AccessStatus {
  FULL_ACCESS
  OVERFLIGHT_ONLY
  NO_ACCESS
}

enum RunwayStatus {
  OPERATIONAL
  C17_C130_ONLY
  C130_ONLY
  NON_OPERATIONAL
  DESTROYED
}

enum MOGLevel {
  ONE_C130_TWO_FIGHTERS
  TWO_C17_SEVEN_FIGHTERS
  SIX_C17_FORTYTWO_FIGHTERS
}

enum AircraftType {
  F16
  F22
  C17
  C130
  C5
}

enum AircraftStatus {
  FMC
  NMC
  DESTROYED
}

enum LocationType {
  MOB
  FOS
  IN_TRANSIT
}

enum FlightIntention {
  LAND
  EN_ROUTE
}

enum AircraftConfiguration {
  CARGO_ONLY
  PERSONNEL_ONLY
  MIXED
  MEDEVAC
}

enum MRACategory {
  MISSION_GENERATION
  COMMAND_CONTROL
  BOS_INTEGRATOR
}

enum AssetType {
  // === Personnel ===
  // Mission Generation Team (Page 10)
  REFUELING
  AIRFIELD_OPS
  AIR_TRAFFIC_CONTROL
  WEATHER
  ASSESSMENT_TEAM
  MAINTENANCE
  PORT

  // Command and Control Team (Page 11)
  OPS_INTEL
  COMMUNICATION
  COMMAND_POST

  // Base Operating Support-Integrator (BOS-I) Team (Page 11)
  SUPPLY_LOGISTICS
  FORCE_PROTECTION
  ENGINEERING_AIRFIELD_REPAIR
  CONTRACTING
  MEDICAL
  CRASH_FIRE_RESCUE
  POWER_GENERATION
  MISSILE_DEFENSE

  // MEDCOM Personnel (Page 38)
  MEDCOM_PERSONNEL

  // === Equipment ===
  // General Equipment (Page 9, 10, 11)
  MAINTENANCE_EQUIP
  FORKLIFT // 3 PP
  FUEL_TRUCK // 6 PP
  HMMWV // 2 PP
  MOBILE_ARRESTING_SYSTEM // 4 PP
  RUNWAY_TAXI_LIGHTING // 1 PP
  FIRE_TRUCK // 6 PP
  GENERATOR // 1 PP
  RAPID_REPAIR_EQUIPMENT // 4 PP
  SATELLITE_DISH // 1 PP
  RADIO // 0 PP
  TRUCK // 2 PP (This seems to be a generic name for HMMWV)
  TENT // 2 PP
  CONTRACTS // 0 PP

  // MEDCOM Specific Equipment (Page 38)
  AMBULANCE // 4 PP
  BEDS // 10 PP
  REFRIGERATION // 6 PP
  SURGERY_SUITE // 3 PP
  ADVANCED_AIRWAY_KIT // 2 PP
  ADVANCED_TRAUMA_KIT // 2 PP
  TRAUMA_KIT // 2 PP
  PATIENT_MONITOR_SYSTEM // 2 PP
  HELICOPTER // 8 PP
  MEDICAL_TRUCK // 6 PP
  MEDICAL_EQUIPMENT // 6 PP
  STRETCHER // 2 PP
  MORTUARY_EQUIPMENT // 10 PP
}

enum CommodityType {
  // General Commodities (Page 9)
  FUEL // 2 PP
  WATER // 1 PP
  FOOD // 1 PP
  AMMO // 1 PP
  MISSILES // 2 PP
  BOMBS // 2 PP

  // MEDCOM Commodities (Pages 38, 39, 40)
  BANDAGES // 1 PP (Assumed, required for MEDEVAC)
  BADGES // 1 PP
  PHARMACEUTICALS // 1 PP
  IV_FLUID // 1 PP
  OXYGEN // 1 PP
  BLOOD_SUPPLY // 6 PP
  SURGICAL_PPE // 1 PP
  BURN_KIT // 2 PP
}

enum AirfieldTask {
  BED_DOWN_SANITATION
  POWER
  COMMAND_CONTROL
  CONTRACTS
  RAMP_SECURITY
  PERIMETER_SECURITY
  MISSILE_DEFENSE
  BASE_HARDENING
  AIRFIELD_OPERATIONS
  MOBILITY_SUPPORT
  INTEGRATED_COMBAT_TURNS
  SPECIALIZED_FUELING
  HOST_NATION_RELATIONSHIPS
  HEALTH_WELFARE
  BASE_RECOVERY
  LOGISTICS_SUPPORT
}

enum ThreatType {
  GROUND_TARGET_10
  FOURTH_GEN_FIGHTER_12
  FIFTH_GEN_FIGHTER_20
  AA_JAMMING
  SATELLITE_JAMMING
}

enum Country {
  JAPAN
  PHILIPPINES
  INDONESIA
  BRUNEI
  SINGAPORE
  MALAYSIA
  THAILAND
  CAMBODIA
  VIETNAM
  LAOS
  INDIA
}

enum MFRStatus {
  PENDING
  APPROVED
  DENIED
}

enum PPRStatus {
  PENDING
  APPROVED
  DENIED
}

enum SatelliteType {
  MISSILE_WARNING
  SDA
  COMM
  ISR
  WEATHER
  ORBITAL_WARFARE
  GPS
}

enum OrbitType {
  LEO
  MEO
  GEO
}

enum CasualtyType {
  MINIMAL
  IMMEDIATE
  DELAYED
  EXPECTANT
}

enum HospitalTask {
  BLOOD_SUPPORT
  BATTLEFIELD_SURGERY
  TRIAGE_TEAM
  FLIGHT_SURGEON
  FLIGHT_NURSE
  MEDICAL_SERVICE_CORP
  AEROMEDICAL_SUPPLY
  DELAYED_BEDSPACE
  MEDIC_RESPONSE
  MINIMAL_CARE
  MINIMAL_BEDSPACE
  MORTUARY_AFFAIRS
  MORTUARY_SERVICES
  MEDICAL_LOGISTICS
  WAR_RESERVE_MATERIAL
}
